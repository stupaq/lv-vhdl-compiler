/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,
NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package stupaq.vhdl93;

import stupaq.parser.Symbol;
import stupaq.parser.SymbolTable;

public class SimpleNode implements Node {

  /**
   * A static reference to the symbol table
   */
  public static SymbolTable symtab;
  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected VHDL93Parser parser;

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(VHDL93Parser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) {
    parent = n;
  }

  public Node jjtGetParent() {
    return parent;
  }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) {
    this.value = value;
  }

  public Object jjtGetValue() {
    return value;
  }

  /** Accept the visitor. * */
  public Object jjtAccept(VHDL93ParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  /** Accept the visitor. * */
  public Object childrenAccept(VHDL93ParserVisitor visitor, Object data) {
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  public String toString() {
    return VHDL93ParserTreeConstants.jjtNodeName[id];
  }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public String toString(String prefix) {
    return prefix + toString();
  }

  /** Customizations for {@link VHDL93Parser} compatibility. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode) children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  /**
   * Start a new block with a new symbol table. The current table is saved in the variable
   * upper_symtab.
   */
  public void newBlock() {
    SymbolTable new_symtab = new SymbolTable();
    new_symtab.upper_symtab = symtab;
    symtab = new_symtab;
  }

  /**
   * Start a new block wit a new symbol table. The current table is saved in the variable
   * upper_symtab. Furthermore, a first symbol of type type and id id is added.
   */
  public void newBlock(String type, String id) {
    SymbolTable new_symtab = new SymbolTable();
    new_symtab.upper_symtab = symtab;
    symtab = new_symtab;
    symtab.addSymbol(new Symbol(id, Symbol.DEFAULT));
  }

  /**
   * End a block: the current symbol table becomes the upper symbol table.
   */
  public void endBlock() {
    symtab = symtab.upper_symtab;
  }

  /**
   * Perform all semantic actions and checks, which are necessary
   */
  public void Check() {
  }

  /**
   * Report warnings, when SIWG Level 1 is violated
   */
  public void CheckSIWGLevel1() {
  }

  public int getId() {
    return id;
  }
}

/* JavaCC - OriginalChecksum=34a52c465cdbbdf067f89d19009d3930 (do not edit this line) */
